name: Deploy to AWS Cluster

on:
  push:
    branches:
      - ent-flow
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: read
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_REGION_NAME: "${{ secrets.AWS_REGION_NAME }}"
      AWS_SECURITY_GROUP_ID: "${{ secrets.AWS_SECURITY_GROUP_ID }}"
      ENCODED_KUBECONFIG: "${{ secrets.ENCODED_KUBECONFIG }}"
      ENCODED_DEVENV_BASTION_PEM: "${{ secrets.ENCODED_DEVENV_BASTION_PEM }}"
      VAULT_ADDR: "${{ secrets.VAULT_ADDR }}"
      VAULT_SERVER: "${{ secrets.VAULT_SERVER }}"
      VAULT_PORT: "${{ secrets.VAULT_PORT }}"
      VAULT_TOKEN: "${{ secrets.VAULT_TOKEN }}"
      VAULT_BASTION: "${{ secrets.VAULT_BASTION }}"
      VAULT_USER: "${{ vars.VAULT_USER }}"
      GITHUB_USER_NAME: "${{ secrets.GH_USER_NAME }}"
      GITHUB_EMAIL_ADDR: "${{ secrets.GH_EMAIL_ADDR }}"
      GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
      GITHUB_REPO_URL: "${{ secrets.GH_REPO_URL }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "${{ env.AWS_REGION_NAME }}"

      - name: AWS Commands
        run: |
          echo "aws --version" && aws --version
          echo "aws configure list" && aws configure list  
          echo "sts get-caller-identity" && aws sts get-caller-identity

      # - name: Set KUBECONFIG
      #   run: |
      #     mkdir -p .kube/config
      #     echo "${{ env.ENCODED_KUBECONFIG }}" | base64 --decode > .kube/config/decoded-kubeconfig
      #     export KUBECONFIG="$(pwd)/.kube/config/decoded-kubeconfig"

      #     kubectl config view && echo "###############-5"
      #     kubectl config current-context && echo "###############-6"
      #     kubectl version && echo "###############-6"
      #     kubectl get nodes

      # - name: Install HashiCorp Vault CLI
      #   run: |
      #     wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      #     echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      #     sudo apt update && sudo apt install vault

      # - name: Local DNS Mapping
      #   run: |
      #     sudo bash -c 'echo "127.0.0.1 ${{ env.VAULT_SERVER }}" >> /etc/hosts'

      # - name: Add SSH Rule to Security Group
      #   run: |
      #     curl https://ipv4.icanhazip.com/ > localip
      #     aws ec2 authorize-security-group-ingress \
      #       --group-id "${{ env.AWS_SECURITY_GROUP_ID }}" \
      #       --protocol "tcp" \
      #       --port "22" \
      #       --cidr "$(cat localip)/32" \
      #       --region "${{ env.AWS_REGION_NAME }}"

      # - name: Create Tunnel
      #   run: |
      #     mkdir ~/.ssh
      #     echo "${{ env.ENCODED_DEVENV_BASTION_PEM }}" | base64 --decode > ~/.ssh/vault.pem
      #     chmod 600 ~/.ssh/vault.pem
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #     ssh-keyscan "${{ env.VAULT_BASTION }}" >> ~/.ssh/known_hosts
      #     ssh -i ~/.ssh/vault.pem -f -q -N -L "${{ env.VAULT_PORT }}:${{ env.VAULT_SERVER }}:${{ env.VAULT_PORT }}" "${{ env.VAULT_USER }}@${{ env.VAULT_BASTION }}" -v
      #   continue-on-error: true

      # - name: Running vault command
      #   run: |
      #     vault status
      #     vault kv list secretsv2/
      #   continue-on-error: true

      # - name: Remove SSH Rule from Security Group
      #   run: |
      #     curl https://ipv4.icanhazip.com/ > localip
      #     aws ec2 revoke-security-group-ingress \
      #       --group-id "${{ env.AWS_SECURITY_GROUP_ID }}" \
      #       --protocol "tcp" \
      #       --port "22" \
      #       --cidr "$(cat localip)/32" \
      #       --region "${{ env.AWS_REGION_NAME }}"

      - name: Display Git Information
        run: |
          env
          git --version
          git branch
          git log -1

      - name: Configure Git
        run: |
          git config --global user.email "${{ env.GITHUB_EMAIL_ADDR }}"
          git config --global user.name "${{ env.GITHUB_USER_NAME }}"
          git remote set-url origin "${{ env.GITHUB_REPO_URL }}"

          echo "##-0"
          git config --list

          echo "##-1"
          git remote -v
          # echo "##-2"
          # git config --list

          touch SAURABH.txt
          echo "Hello" >> SAURABH.txt

          # Push changes
          git add .
          git commit -m "Your commit message"
          git push "https://${{ env.GITHUB_USER_NAME }}:${{ env.GITHUB_TOKEN }}@github.com/${{ env.GITHUB_USER_NAME }}/H-bevel.git" "ent-flow"
          # git pull origin ent-flow # working
