name: Deploy to AWS Cluster

on:
  push:
    branches:
      - flow1
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_REGION_NAME: "${{ secrets.AWS_REGION_NAME }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_SECURITY_GROUP_ID: "${{ secrets.AWS_SECURITY_GROUP_ID }}"
      CLUSTER_CONTEXT: "${{ secrets.CLUSTER_CONTEXT }}"
      CLOUD_PROVIDER: "${{ vars.CLOUD_PROVIDER }}"
      DOCKER_URL: "${{ secrets.DOCKER_URL }}"
      DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
      DOCKER_PASSWORD: "${{ secrets.DOCKER_PASSWORD }}"
      DEMO_USER: "${{ vars.DEMO_USER }}"
      EXTERNAL_URL_SUFFIX: "${{ secrets.EXTERNAL_URL_SUFFIX }}"
      ENCODED_KUBECONFIG_DEMO: "${{ secrets.ENCODED_KUBECONFIG_DEMO }}"
      GITHUB_USER_NAME: "${{ secrets.GH_USER_NAME }}"
      GITHUB_EMAIL_ADDR: "${{ secrets.GH_EMAIL_ADDR }}"
      GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
      GITHUB_BRANCH: "${{ vars.GH_BRANCH }}"
      GITHUB_PRIVATE_SSH_KEY: "${{ secrets.GH_PRIVATE_SSH_KEY }}"
      VAULT_ADDR: "${{ secrets.VAULT_ADDR }}"
      VAULT_TOKEN: "${{ secrets.VAULT_TOKEN }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
      #     aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
      #     aws-region: "${{ env.AWS_REGION_NAME }}"

      # - name: AWS Commands
      #   run: |
      #     echo "aws --version" && aws --version
      #     echo "aws configure list" && aws configure list  
      #     echo "sts get-caller-identity" && aws sts get-caller-identity

      # - name: Set KUBECONFIG
      #   run: |
      #     mkdir -p /home/runner/.kube/build_config
      #     echo "${{ env.ENCODED_KUBECONFIG_DEMO }}" | base64 --decode > /home/runner/.kube/build_config/decoded_kubeconfig
      #     export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"
      #     echo "HOME=>$HOME"
      #     echo 'export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"' >> $HOME/.bashrc
      #     source $HOME/.bashrc
      #     echo "KUBECONFIG=$KUBECONFIG"
      #     echo "###################################"
      #     kubectl config view && echo "###############-5"
      #     kubectl config current-context && echo "###############-6"
      #     kubectl version && echo "###############-6"
      #     kubectl get nodes

      - name: Install HashiCorp Vault CLI
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install vault

      # - name: Vault Commands
      #   run: |
      #     echo "1=>vault status=>" && vault status
      #     echo "2=>vault kv list secretsv2/=>" && vault kv list secretsv2/

      # - name: Git Setup
      #   run: |
      #     git --version
      #     git branch
      #     git log -1
      #     git config --global user.email "${{ env.GITHUB_EMAIL_ADDR }}"
      #     git config --global user.name "${{ env.GITHUB_USER_NAME }}"
      # #   # continue-on-error: true

      - name: Network File Setup
        run: |

          mkdir -p build/ENT/

          tree build/ENT/

          cp "platforms/r3-corda-ent/configuration/samples/testing-json.yaml" "build/ENT/running-network-cordaent.yaml"
          YAML_FILE="build/ENT/running-network-cordaent.yaml"

          VAULT_ADDR="${{ env.VAULT_ADDR }}"
          VAULT_ROOT_TOKEN="${{ env.VAULT_TOKEN }}"

          sed -i "s#VAULT_ADDR_PLACEHOLDER#$VAULT_ADDR#g" "$YAML_FILE"
          sed -i "s#VAULT_ROOT_TOKEN_PLACEHOLDER#$VAULT_ROOT_TOKEN#g" "$YAML_FILE"


          echo "3->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
          cat "build/ENT/running-network-cordaent.yaml"
        # continue-on-error: true

      - name: Check Ansible
        run: |
          echo "1=>ansible --version=>" && ansible --version
          echo "2=>which ansible=>" && which ansible
          echo "3=>python --version=>" && python --version
          echo "4=>which python=>" && which python
          echo "5=>python3 --version=>" && python3 --version
          echo "6=>which python3=>" && which python3
          pip freeze
          echo "7=> Installing pips"
          pip install jmespath # python3 -m pip install --user jmespath # pip3.10 install jmespath --user # python3 -m pip install jmespath # /usr/bin/pip3.10 install jmespath # pip install jmespath
          pip install jinja2-time
          pip install ansible # ==2.16.1 # 2.10.6 # 2.12.6
          echo "################"
          export PATH=$HOME/.local/bin:$PATH
          pip freeze
          echo "################"

          mkdir -p ~/bin
          export PATH=$PATH:~/bin
          pip3 install openshift=='0.12.0'
          ansible-galaxy collection install -r platforms/shared/configuration/requirements.yaml
        # continue-on-error: true

      - name: Deploy network
        run: |
          export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"

          echo "1=>ansible --version=>" && ansible --version
          echo "2=>which ansible=>" && which ansible
          echo "1=>tree build=>" && tree build
          # echo "2=>pip list=>" && pip list
          # pip install jmespath
          # pip install jinja2-time
          # echo "3=>pip list=>" && pip list
          # python -c "import jmespath"
          # echo "4=>vault status=>" && vault status
          # echo "5=>vault kv list secretsv2/=>" && vault kv list secretsv2/

          ansible-playbook platforms/shared/configuration/testing-site.yaml \
            -i platforms/shared/inventory/ansible_provisioners \
            -e @build/ENT/running-network-cordaent.yaml \
            -e 'ansible_python_interpreter=/usr/bin/python3.10' -v # > build/logs
        # continue-on-error: true

      # - name: Output
      #   run: |
      #     export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"
      #     # echo "0=>" && cat build/logs
      #     echo "1=>" && tree platforms/r3-corda-ent/releases
      #     echo "2=>" && kubectl get ns
      #     echo "3=>" && kubectl get pods -A
      #     # echo "4=>" && curl 127.0.0.1:9001
      #     echo "5=>" && git log --oneline | head -n 10
      #     echo "6=>" && git status
      #     echo "7=>" && kubectl get ns
      #     echo "8=>" && vault status
      #     echo "9=>" && vault kv list secretsv2/
      #   # continue-on-error: true
