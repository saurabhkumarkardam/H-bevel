name: Deploy to AWS Cluster

on:
  push:
    branches:
      - flow1
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_REGION_NAME: "${{ secrets.AWS_REGION_NAME }}"
      AWS_SECURITY_GROUP_ID: "${{ secrets.AWS_SECURITY_GROUP_ID }}"
      ENCODED_KUBECONFIG_DEMO: "${{ secrets.ENCODED_KUBECONFIG_DEMO }}"
      ENCODED_DEVINSTANCE_PEM: "${{ secrets.ENCODED_DEVINSTANCE_PEM }}"
      VAULT_ADDR: "http://vault.internal.demo.aws.blockchaincloudpoc.com:9001"
      VAULT_TOKEN: "${{ secrets.VAULT_TOKEN }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "${{ env.AWS_REGION_NAME }}"

      - name: AWS Commands
        run: |
          echo "aws --version" && aws --version
          echo "aws configure list" && aws configure list  
          echo "sts get-caller-identity" && aws sts get-caller-identity

      - name: Set KUBECONFIG
        run: |
          mkdir -p /home/runner/.kube/build_config
          echo "${{ env.ENCODED_KUBECONFIG_DEMO }}" | base64 --decode > /home/runner/.kube/build_config/decoded_kubeconfig
          export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"
          echo "HOME=>$HOME"
          echo 'export KUBECONFIG="/home/runner/.kube/build_config/decoded_kubeconfig"' >> $HOME/.bashrc
          source $HOME/.bashrc
          echo "KUBECONFIG=$KUBECONFIG"
          echo "###################################"
          kubectl config view && echo "###############-5"
          kubectl config current-context && echo "###############-6"
          kubectl version && echo "###############-6"
          kubectl get nodes

      - name: Install HashiCorp Vault CLI
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install vault

      - name: Add SSH Rule to Security Group
        run: |
          mkdir - p build
          curl https://ipv4.icanhazip.com/ > build/localip 
          aws ec2 authorize-security-group-ingress \
            --group-id "${{ env.AWS_SECURITY_GROUP_ID }}" \
            --protocol "tcp" \
            --port "22" \
            --cidr "$(cat build/localip)/32" \
            --region "${{ env.AWS_REGION_NAME }}"

      - name: Local DNS Mapping
        run: |
          # sudo bash -c 'echo "127.0.0.1 ${{ env.VAULT_SERVER }}" >> /etc/hosts'
          # sudo bash -c 'echo "127.0.0.1 ${{ env.DEMO_VAULT_SERVER }}" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 vault.internal.demo.aws.blockchaincloudpoc.com" >> /etc/hosts'
          echo "1" && cat /etc/hosts

      - name: Create Tunnel
        run: |
          mkdir ~/.ssh
          echo "${{ env.ENCODED_DEVINSTANCE_PEM }}" | base64 --decode > ~/.ssh/vault.pem
          chmod 664 ~/.ssh/vault.pem
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan "2.bastion.demo.aws.blockchaincloudpoc.com" >> ~/.ssh/known_hosts
          echo "one"
          ssh -i ~/.ssh/vault.pem -f -q -N -L "9001:vault.internal.demo.aws.blockchaincloudpoc.com:9001" "devinstance@2.bastion.demo.aws.blockchaincloudpoc.com" -v
        continue-on-error: true

      - name: Vault command
        run: |
          vault status
          vault kv list secretsv2/
        continue-on-error: true

      - name: Remove SSH Rule from Security Group
        run: |
          curl https://ipv4.icanhazip.com/ > localip
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ env.AWS_SECURITY_GROUP_ID }}" \
            --protocol "tcp" \
            --port "22" \
            --cidr "$(cat build/localip)/32" \
            --region "${{ env.AWS_REGION_NAME }}"
